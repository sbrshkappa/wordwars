{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/shared/types/game.ts"],"sourcesContent":["// Card types and values\nexport interface Card {\n  id: string;\n  letter: string;\n  points: number;\n  isMaster: boolean;\n  assignedLetter?: string; // For master cards that have been assigned a letter\n}\n\n// Player structure\nexport interface Player {\n  id: string;\n  name: string;\n  hand: Card[];\n  score: number;\n  isCurrentTurn: boolean;\n  hasDiscardedThisTurn: boolean;\n}\n\n// Word played on the board\nexport interface PlayedWord {\n  id: string;\n  word: string;\n  cards: Card[];\n  playerId: string;\n  playerName: string;\n  score: number;\n  timestamp: number;\n  position?: { x: number; y: number }; // Optional for backward compatibility\n}\n\n\n\n// Game state\nexport interface GameState {\n  players: Player[];\n  currentPlayerIndex: number;\n  deck: Card[];\n  discardPile: Card[];\n  tempDiscardedCard: Card | null; // Card temporarily discarded, not yet added to discard pile\n  playedWords: PlayedWord[];\n  gamePhase: 'lobby' | 'playing' | 'roundEnd' | 'gameOver';\n  roundNumber: number;\n  winner: string | null;\n}\n\n// Game actions\nexport type GameAction = \n  | { type: 'START_GAME'; playerNames: string[] }\n  | { type: 'DEAL_CARDS' }\n  | { type: 'PLAY_WORD'; playerId: string; cards: Card[]; word: string; position: { x: number; y: number } }\n  | { type: 'EXTEND_WORD'; playerId: string; wordId: string; cards: Card[]; newWord: string }\n  | { type: 'DISCARD_CARD'; playerId: string; card: Card }\n  | { type: 'DRAW_CARD'; playerId: string }\n  | { type: 'EXCHANGE_CARDS'; playerId: string; handCards: Card[]; boardCards: Card[] }\n  | { type: 'CHALLENGE_WORD'; challengerId: string; wordId: string; isValid: boolean }\n  | { type: 'END_ROUND' }\n  | { type: 'END_GAME' };\n\n\n\n// Card values based on game rules\nexport const CARD_VALUES: Record<string, number> = {\n  'A': 10, 'E': 10, 'I': 10,\n  'O': 8, 'U': 8, 'H': 8, 'L': 8, 'R': 8, 'S': 8, 'T': 8, 'W': 8,\n  'C': 8, 'K': 8, 'M': 8, 'N': 8, 'P': 8,\n  'D': 6, 'J': 6, 'V': 6,\n  'G': 4, 'Q': 4, 'Y': 4,\n  'B': 2, 'F': 2, 'X': 2, 'Z': 2,\n  'MASTER': 15\n};\n\n// Card distribution for deck creation\nexport const CARD_DISTRIBUTION: Record<string, number> = {\n  'A': 4, 'E': 4, 'I': 4,\n  'O': 3, 'U': 3, 'H': 3, 'L': 3, 'R': 3, 'S': 3, 'T': 3, 'W': 3,\n  'C': 1, 'K': 1, 'M': 1, 'N': 1, 'P': 1,\n  'D': 1, 'J': 1, 'V': 1,\n  'G': 1, 'Q': 1, 'Y': 1,\n  'B': 1, 'F': 1, 'X': 1, 'Z': 1,\n  'MASTER': 1\n}; "],"names":[],"mappings":"AAAA,wBAAwB;;;;;AA8DjB,MAAM,cAAsC;IACjD,KAAK;IAAI,KAAK;IAAI,KAAK;IACvB,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAC7D,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IACrC,KAAK;IAAG,KAAK;IAAG,KAAK;IACrB,KAAK;IAAG,KAAK;IAAG,KAAK;IACrB,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAC7B,UAAU;AACZ;AAGO,MAAM,oBAA4C;IACvD,KAAK;IAAG,KAAK;IAAG,KAAK;IACrB,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAC7D,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IACrC,KAAK;IAAG,KAAK;IAAG,KAAK;IACrB,KAAK;IAAG,KAAK;IAAG,KAAK;IACrB,KAAK;IAAG,KAAK;IAAG,KAAK;IAAG,KAAK;IAC7B,UAAU;AACZ","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/shared/gameLogic.ts"],"sourcesContent":["import { Card, GameState, Player, PlayedWord, CARD_VALUES, CARD_DISTRIBUTION } from './types/game';\n\n// Create a new deck based on the card distribution rules\nexport function createDeck(): Card[] {\n  const deck: Card[] = [];\n  let cardId = 0;\n\n  Object.entries(CARD_DISTRIBUTION).forEach(([letter, count]) => {\n    for (let i = 0; i < count; i++) {\n      deck.push({\n        id: `card_${cardId++}`,\n        letter,\n        points: CARD_VALUES[letter],\n        isMaster: letter === 'MASTER'\n      });\n    }\n  });\n\n  // Verify total deck size\n  const expectedTotal = Object.values(CARD_DISTRIBUTION).reduce((sum, count) => sum + count, 0);\n  if (deck.length !== expectedTotal) {\n    throw new Error(`Deck creation error: Expected ${expectedTotal} cards, got ${deck.length}`);\n  }\n\n  console.log(`Deck created with ${deck.length} cards`);\n  return deck;\n}\n\n// Shuffle the deck using Fisher-Yates algorithm\nexport function shuffleDeck(deck: Card[]): Card[] {\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Deal cards to players\nexport function dealCards(players: Player[], deck: Card[], cardsPerPlayer: number = 10): {\n  updatedPlayers: Player[];\n  remainingDeck: Card[];\n  discardPile: Card[];\n} {\n  const updatedPlayers: Player[] = players.map(player => ({ ...player, hand: [] }));\n  const remainingDeck = [...deck];\n\n  console.log(`Dealing ${cardsPerPlayer} cards to ${players.length} players from deck of ${deck.length} cards`);\n\n  // Deal cards to each player\n  for (let round = 0; round < cardsPerPlayer; round++) {\n    for (let playerIndex = 0; playerIndex < updatedPlayers.length; playerIndex++) {\n      if (remainingDeck.length > 0) {\n        const card = remainingDeck.pop()!;\n        updatedPlayers[playerIndex].hand = [...updatedPlayers[playerIndex].hand, card];\n      } else {\n        console.warn(`Deck ran out during dealing! Round ${round}, Player ${playerIndex}`);\n        break;\n      }\n    }\n  }\n\n  // STRICT validation that each player has exactly the correct number of cards\n  let hasError = false;\n  updatedPlayers.forEach((player, index) => {\n    if (player.hand.length !== cardsPerPlayer) {\n      console.error(`ERROR: Player ${index} (${player.name}) has ${player.hand.length} cards instead of ${cardsPerPlayer}!`);\n      console.error('Player hand:', player.hand.map(c => c.letter));\n      hasError = true;\n    }\n  });\n\n  // If there's an error, throw an exception to prevent the game from continuing\n  if (hasError) {\n    throw new Error(`Card dealing error: Players have wrong number of cards. Expected ${cardsPerPlayer} each.`);\n  }\n\n  // Start with empty discard pile\n  const discardPile: Card[] = [];\n\n  console.log(`Dealing complete. Remaining deck: ${remainingDeck.length} cards, Discard pile: ${discardPile.length} cards`);\n\n  return {\n    updatedPlayers,\n    remainingDeck,\n    discardPile\n  };\n}\n\n// Check if a word is valid (basic implementation - can be enhanced with dictionary)\nexport function isValidWord(word: string): boolean {\n  // Basic validation: word must be at least 2 letters and contain only letters\n  return word.length >= 2 && /^[A-Z]+$/.test(word);\n}\n\n// Check if a word is valid using dictionary (async)\nexport async function isValidDictionaryWord(word: string): Promise<boolean> {\n  // Import here to avoid circular dependencies\n  const { isValidDictionaryWordCached } = await import('./dictionaryService');\n  return isValidDictionaryWordCached(word);\n}\n\n// Calculate score for remaining cards in hand\nexport function calculateHandScore(cards: Card[]): number {\n  return cards.reduce((total, card) => total + card.points, 0);\n}\n\n// Check if a player can play a word with their cards\nexport function canFormWord(cards: Card[], word: string): boolean {\n  // Get effective letters (use assigned letters for master cards)\n  const cardLetters = cards.map(card => \n    card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  );\n  const wordLetters = word.split('');\n  \n  // Count letter frequencies\n  const cardCounts: Record<string, number> = {};\n  const wordCounts: Record<string, number> = {};\n  \n  cardLetters.forEach(letter => {\n    cardCounts[letter] = (cardCounts[letter] || 0) + 1;\n  });\n  \n  wordLetters.forEach(letter => {\n    wordCounts[letter] = (wordCounts[letter] || 0) + 1;\n  });\n  \n  // Check if we have enough cards for each letter\n  for (const [letter, count] of Object.entries(wordCounts)) {\n    const availableCards = cardCounts[letter] || 0;\n    \n    if (availableCards < count) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// Check if a new word can be formed by inserting selected letters into an original word\nexport function canFormExtendedWord(originalWord: string, selectedLetters: string[], newWord: string): boolean {\n  // Check if the new word length equals original word length plus selected letters length\n  if (newWord.length !== originalWord.length + selectedLetters.length) {\n    return false;\n  }\n  \n  // Create frequency maps\n  const originalLetterCounts = new Map<string, number>();\n  const selectedLetterCounts = new Map<string, number>();\n  const newWordLetterCounts = new Map<string, number>();\n  \n  // Count letters in original word\n  for (const letter of originalWord) {\n    originalLetterCounts.set(letter, (originalLetterCounts.get(letter) || 0) + 1);\n  }\n  \n  // Count letters in selected cards\n  for (const letter of selectedLetters) {\n    selectedLetterCounts.set(letter, (selectedLetterCounts.get(letter) || 0) + 1);\n  }\n  \n  // Count letters in new word\n  for (const letter of newWord) {\n    newWordLetterCounts.set(letter, (newWordLetterCounts.get(letter) || 0) + 1);\n  }\n  \n  // Check if the new word contains exactly the letters from original + selected\n  for (const [letter, count] of newWordLetterCounts) {\n    const originalCount = originalLetterCounts.get(letter) || 0;\n    const selectedCount = selectedLetterCounts.get(letter) || 0;\n    const expectedCount = originalCount + selectedCount;\n    \n    if (count !== expectedCount) {\n      return false;\n    }\n  }\n  \n  // Check if all original and selected letters are used\n  for (const [letter, count] of originalLetterCounts) {\n    const newCount = newWordLetterCounts.get(letter) || 0;\n    if (newCount < count) {\n      return false;\n    }\n  }\n  \n  for (const [letter, count] of selectedLetterCounts) {\n    const newCount = newWordLetterCounts.get(letter) || 0;\n    if (newCount < count) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// Reconstruct the cards array to match the new word after extension\nexport function reconstructCardsForWord(originalCards: Card[], newCards: Card[], newWord: string): Card[] {\n  const originalLetters = originalCards.map(card => \n    card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  );\n  const newLetters = newCards.map(card => \n    card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  );\n  \n  const result: Card[] = [];\n  let originalIndex = 0;\n  let newIndex = 0;\n  \n  for (let i = 0; i < newWord.length; i++) {\n    const currentLetter = newWord[i];\n    \n    // Check if this letter comes from the original word\n    if (originalIndex < originalLetters.length && currentLetter === originalLetters[originalIndex]) {\n      result.push(originalCards[originalIndex]);\n      originalIndex++;\n    } else {\n      // This letter comes from the new cards\n      if (newIndex < newLetters.length && currentLetter === newLetters[newIndex]) {\n        result.push(newCards[newIndex]);\n        newIndex++;\n      } else {\n        // Find the matching new card (for duplicate letters)\n        const matchingNewCardIndex = newLetters.findIndex((letter, idx) => \n          idx >= newIndex && letter === currentLetter\n        );\n        if (matchingNewCardIndex !== -1) {\n          result.push(newCards[matchingNewCardIndex]);\n          newIndex = matchingNewCardIndex + 1;\n        }\n      }\n    }\n  }\n  \n  return result;\n}\n\n// Initialize a new game\nexport function initializeGame(playerNames: string[]): GameState {\n  const deck = shuffleDeck(createDeck());\n  \n  const players: Player[] = playerNames.map((name, index) => ({\n    id: `player_${index}`,\n    name,\n    hand: [],\n    score: 0,\n    isCurrentTurn: index === 0,\n    hasDiscardedThisTurn: false\n  }));\n\n  const { updatedPlayers, remainingDeck, discardPile } = dealCards(players, deck);\n\n  const gameState: GameState = {\n    players: updatedPlayers,\n    currentPlayerIndex: 0,\n    deck: remainingDeck,\n    discardPile,\n    tempDiscardedCard: null,\n    playedWords: [],\n    gamePhase: 'lobby',\n    roundNumber: 1,\n    winner: null\n  };\n\n  // Validate the game state after initialization\n  const validation = validateGameState(gameState);\n  if (!validation.isValid) {\n    console.error('Game state validation failed after initialization:', validation.errors);\n  }\n\n  return gameState;\n}\n\n// Get current player\nexport function getCurrentPlayer(gameState: GameState): Player {\n  return gameState.players[gameState.currentPlayerIndex];\n}\n\n// Switch to next player's turn\nexport function nextTurn(gameState: GameState): GameState {\n  const nextPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;\n  \n  return {\n    ...gameState,\n    currentPlayerIndex: nextPlayerIndex,\n    players: gameState.players.map((player, index) => ({\n      ...player,\n      isCurrentTurn: index === nextPlayerIndex,\n      hasDiscardedThisTurn: false\n    }))\n  };\n}\n\n// Play a word with selected cards (async version with dictionary validation)\nexport async function playWordWithValidation(\n  gameState: GameState,\n  playerId: string,\n  selectedCards: Card[],\n  word: string\n): Promise<{ success: boolean; gameState: GameState; error?: string }> {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) {\n    return { success: false, gameState, error: 'Player not found' };\n  }\n\n  // Check if word is valid in dictionary\n  const isValid = await isValidDictionaryWord(word);\n  if (!isValid) {\n    return { \n      success: false, \n      gameState, \n      error: `\"${word}\" is not a valid word. Please try a different word.` \n    };\n  }\n\n  // Remove cards from player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  // Remove selected cards from hand\n  const selectedCardIds = new Set(selectedCards.map(card => card.id));\n  player.hand = player.hand.filter(card => !selectedCardIds.has(card.id));\n  \n  // Calculate word score and add to player's score\n  const wordScore = selectedCards.reduce((total, card) => total + card.points, 0);\n  player.score += wordScore;\n  \n  updatedPlayers[playerIndex] = player;\n\n  // Create new played word with effective letters\n  const effectiveCards = selectedCards.map(card => ({\n    ...card,\n    letter: card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  }));\n\n  const newPlayedWord: PlayedWord = {\n    id: `word_${Date.now()}`,\n    word,\n    cards: effectiveCards,\n    playerId,\n    playerName: player.name,\n    score: wordScore,\n    timestamp: Date.now(),\n    position: { x: 0, y: 0 } // We'll implement positioning later\n  };\n\n  const gameStateWithWord = {\n    ...gameState,\n    players: updatedPlayers,\n    playedWords: [...gameState.playedWords, newPlayedWord]\n  };\n\n  // End turn after playing a word\n  return { success: true, gameState: endTurn(gameStateWithWord) };\n}\n\n// Play a word with selected cards (sync version for backward compatibility)\nexport function playWord(\n  gameState: GameState,\n  playerId: string,\n  selectedCards: Card[],\n  word: string\n): GameState {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) return gameState;\n\n  // Remove cards from player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  // Remove selected cards from hand\n  const selectedCardIds = new Set(selectedCards.map(card => card.id));\n  player.hand = player.hand.filter(card => !selectedCardIds.has(card.id));\n  \n  // Calculate word score and add to player's score\n  const wordScore = selectedCards.reduce((total, card) => total + card.points, 0);\n  player.score += wordScore;\n  \n  updatedPlayers[playerIndex] = player;\n\n  // Create new played word with effective letters\n  const effectiveCards = selectedCards.map(card => ({\n    ...card,\n    letter: card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  }));\n\n  const newPlayedWord: PlayedWord = {\n    id: `word_${Date.now()}`,\n    word,\n    cards: effectiveCards,\n    playerId,\n    playerName: player.name,\n    score: wordScore,\n    timestamp: Date.now(),\n    position: { x: 0, y: 0 } // We'll implement positioning later\n  };\n\n  const gameStateWithWord = {\n    ...gameState,\n    players: updatedPlayers,\n    playedWords: [...gameState.playedWords, newPlayedWord]\n  };\n\n  // End turn after playing a word\n  return endTurn(gameStateWithWord);\n}\n\n// Check if a player has won (empty hand)\nexport function checkForWinner(gameState: GameState): string | null {\n  const playerWithEmptyHand = gameState.players.find(player => player.hand.length === 0);\n  return playerWithEmptyHand ? playerWithEmptyHand.id : null;\n}\n\n// Discard a card from player's hand\nexport function discardCard(\n  gameState: GameState,\n  playerId: string,\n  cardToDiscard: Card\n): GameState {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) return gameState;\n\n  // Remove card from player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  player.hand = player.hand.filter(card => card.id !== cardToDiscard.id);\n  player.hasDiscardedThisTurn = true; // Mark that player has discarded this turn\n  updatedPlayers[playerIndex] = player;\n\n  // Temporarily store the discarded card (not yet added to discard pile)\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    tempDiscardedCard: cardToDiscard\n  };\n}\n\n// Draw a card from the deck\nexport function drawCard(\n  gameState: GameState,\n  playerId: string\n): GameState {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) return gameState;\n\n  const currentPlayer = gameState.players[playerIndex];\n\n  // Check if player has discarded this turn\n  if (!currentPlayer.hasDiscardedThisTurn) {\n    console.log('Cannot draw: must discard a card first');\n    return gameState;\n  }\n\n  // Check if deck is empty\n  if (gameState.deck.length === 0) {\n    console.log('Cannot draw: deck is empty');\n    return gameState;\n  }\n\n  // Check if player already has 10 cards (shouldn't happen after discard, but safety check)\n  if (currentPlayer.hand.length >= 10) {\n    console.error(`Player ${currentPlayer.name} already has ${currentPlayer.hand.length} cards, cannot draw more`);\n    return gameState;\n  }\n\n  // Draw card from deck\n  const updatedDeck = [...gameState.deck];\n  const drawnCard = updatedDeck.pop()!;\n\n  // Add card to player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  player.hand = [...player.hand, drawnCard];\n  updatedPlayers[playerIndex] = player;\n\n  // Move the temporarily discarded card to the discard pile\n  const updatedDiscardPile = [...gameState.discardPile];\n  if (gameState.tempDiscardedCard) {\n    updatedDiscardPile.push(gameState.tempDiscardedCard);\n  }\n\n  const gameStateWithDraw = {\n    ...gameState,\n    players: updatedPlayers,\n    deck: updatedDeck,\n    discardPile: updatedDiscardPile,\n    tempDiscardedCard: null\n  };\n\n  // Validate the game state after drawing\n  const validation = validateGameState(gameStateWithDraw);\n  if (!validation.isValid) {\n    console.error('Game state validation failed after drawing card:', validation.errors);\n  }\n\n  // End turn after drawing a card\n  return endTurn(gameStateWithDraw);\n}\n\n// Draw the previous top card from discard pile (not the card just discarded)\nexport function drawFromDiscard(\n  gameState: GameState,\n  playerId: string\n): GameState {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) return gameState;\n\n  const currentPlayer = gameState.players[playerIndex];\n\n  // Check if player has discarded this turn\n  if (!currentPlayer.hasDiscardedThisTurn) {\n    console.log('Cannot draw from discard: must discard a card first');\n    return gameState;\n  }\n\n  // Check if discard pile has at least 1 card (the card that was previously discarded)\n  if (gameState.discardPile.length < 1) {\n    console.log('Cannot draw from discard: discard pile is empty');\n    return gameState;\n  }\n\n  // Check if player already has 10 cards (shouldn't happen after discard, but safety check)\n  if (currentPlayer.hand.length >= 10) {\n    console.error(`Player ${currentPlayer.name} already has ${currentPlayer.hand.length} cards, cannot draw more`);\n    return gameState;\n  }\n\n  // Get the top card from discard pile (the card that was previously discarded)\n  const updatedDiscardPile = [...gameState.discardPile];\n  const drawnCard = updatedDiscardPile.pop()!; // Get the top card\n\n  // Add card to player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  player.hand = [...player.hand, drawnCard];\n  updatedPlayers[playerIndex] = player;\n\n  // Move the temporarily discarded card to the discard pile\n  const finalDiscardPile = [...updatedDiscardPile];\n  if (gameState.tempDiscardedCard) {\n    finalDiscardPile.push(gameState.tempDiscardedCard);\n  }\n\n  const gameStateWithDraw = {\n    ...gameState,\n    players: updatedPlayers,\n    discardPile: finalDiscardPile,\n    tempDiscardedCard: null\n  };\n\n  // Validate the game state after drawing\n  const validation = validateGameState(gameStateWithDraw);\n  if (!validation.isValid) {\n    console.error('Game state validation failed after drawing from discard:', validation.errors);\n  }\n\n  // End turn after drawing from discard\n  return endTurn(gameStateWithDraw);\n}\n\n// End current player's turn\nexport function endTurn(gameState: GameState): GameState {\n  // Check for win condition first\n  const winner = checkForWinner(gameState);\n  if (winner) {\n    return {\n      ...gameState,\n      gamePhase: 'gameOver',\n      winner\n    };\n  }\n\n  // Switch to next player\n  return nextTurn(gameState);\n}\n\n// Start a new game\nexport function startGame(playerNames: string[]): GameState {\n  const gameState = initializeGame(playerNames);\n  return {\n    ...gameState,\n    gamePhase: 'playing'\n  };\n}\n\n// Validate game state for consistency\nexport function validateGameState(gameState: GameState): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  \n  // Check that no player has more than 10 cards\n  gameState.players.forEach((player, index) => {\n    if (player.hand.length > 10) {\n      errors.push(`Player ${index} (${player.name}) has ${player.hand.length} cards (should be ≤10)`);\n    }\n  });\n  \n  // Check that total cards in game equals expected total\n  const totalCardsInHands = gameState.players.reduce((sum, player) => sum + player.hand.length, 0);\n  const totalCardsInPlayedWords = gameState.playedWords.reduce((sum, word) => sum + word.cards.length, 0);\n  const totalCardsInDiscard = gameState.discardPile.length;\n  const totalCardsInDeck = gameState.deck.length;\n  const totalCardsInTempDiscard = gameState.tempDiscardedCard ? 1 : 0;\n  \n  const totalCardsInGame = totalCardsInHands + totalCardsInPlayedWords + totalCardsInDiscard + totalCardsInDeck + totalCardsInTempDiscard;\n  const expectedTotalCards = Object.values(CARD_DISTRIBUTION).reduce((sum, count) => sum + count, 0);\n  \n  if (totalCardsInGame !== expectedTotalCards) {\n    errors.push(`Total cards in game (${totalCardsInGame}) doesn't match expected total (${expectedTotalCards})`);\n    errors.push(`Breakdown: Hands=${totalCardsInHands}, Played=${totalCardsInPlayedWords}, Discard=${totalCardsInDiscard}, Deck=${totalCardsInDeck}, Temp=${totalCardsInTempDiscard}`);\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n// Check if game should end (deck empty and no more plays possible)\nexport function checkGameEnd(gameState: GameState): boolean {\n  // Game ends if deck is empty and all players have no valid plays\n  if (gameState.deck.length > 0) return false;\n  \n  // Check if any player can make a valid play\n  for (const player of gameState.players) {\n    if (player.hand.length > 0) {\n      // For now, assume any cards can form some word\n      // In a real implementation, you'd check if they can actually form valid words\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// Calculate final scores and determine winner\nexport function calculateFinalScores(gameState: GameState): GameState {\n  const updatedPlayers = gameState.players.map(player => {\n    // Calculate penalty for remaining cards\n    const handPenalty = calculateHandScore(player.hand);\n    const finalScore = Math.max(0, player.score - handPenalty);\n    \n    return {\n      ...player,\n      score: finalScore\n    };\n  });\n\n  // Find winner (player with highest score)\n  const winner = updatedPlayers.reduce((highest, current) => \n    current.score > highest.score ? current : highest\n  );\n\n  return {\n    ...gameState,\n    players: updatedPlayers,\n    gamePhase: 'gameOver',\n    winner: winner.id\n  };\n}\n\n// End the game and calculate final scores\nexport function endGame(gameState: GameState): GameState {\n  return calculateFinalScores(gameState);\n}\n\n// Extend an existing word by inserting cards (async version with dictionary validation)\nexport async function extendWordWithValidation(\n  gameState: GameState,\n  playerId: string,\n  wordId: string,\n  selectedCards: Card[],\n  newWord: string\n): Promise<{ success: boolean; gameState: GameState; error?: string }> {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) {\n    return { success: false, gameState, error: 'Player not found' };\n  }\n\n  // Find the word to extend\n  const wordToExtend = gameState.playedWords.find(word => word.id === wordId);\n  if (!wordToExtend) {\n    return { success: false, gameState, error: 'Word not found for extension' };\n  }\n\n  // Validate that the new word can be formed by inserting selected cards into the original word\n  const selectedLetters = selectedCards.map(card => \n    card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  );\n  \n  if (!canFormExtendedWord(wordToExtend.word, selectedLetters, newWord)) {\n    return { \n      success: false, \n      gameState, \n      error: 'New word cannot be formed by inserting the selected cards into the original word' \n    };\n  }\n\n  // Check if word is valid in dictionary\n  const isValid = await isValidDictionaryWord(newWord);\n  if (!isValid) {\n    return { \n      success: false, \n      gameState, \n      error: `\"${newWord}\" is not a valid word. Please try a different word.` \n    };\n  }\n\n  // Remove selected cards from player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  const selectedCardIds = new Set(selectedCards.map(card => card.id));\n  player.hand = player.hand.filter(card => !selectedCardIds.has(card.id));\n  \n  // Calculate word score and add to player's score\n  const wordScore = selectedCards.reduce((total, card) => total + card.points, 0);\n  player.score += wordScore;\n  \n  updatedPlayers[playerIndex] = player;\n\n  // Create new extended word with proper card ordering\n  const effectiveCards = selectedCards.map(card => ({\n    ...card,\n    letter: card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  }));\n\n  // Reconstruct the cards array to match the new word\n  const allCards = reconstructCardsForWord(wordToExtend.cards, effectiveCards, newWord);\n\n  const extendedWord: PlayedWord = {\n    id: `word_${Date.now()}`,\n    word: newWord,\n    cards: allCards,\n    playerId,\n    playerName: player.name,\n    score: wordScore,\n    timestamp: Date.now(),\n    position: wordToExtend.position\n  };\n\n  // Remove the original word and add the extended word\n  const updatedPlayedWords = gameState.playedWords.filter(word => word.id !== wordId);\n  updatedPlayedWords.push(extendedWord);\n\n  const gameStateWithExtension = {\n    ...gameState,\n    players: updatedPlayers,\n    playedWords: updatedPlayedWords\n  };\n\n  // End turn after extending a word\n  return { success: true, gameState: endTurn(gameStateWithExtension) };\n}\n\n// Extend an existing word by inserting cards (sync version for backward compatibility)\nexport function extendWord(\n  gameState: GameState,\n  playerId: string,\n  wordId: string,\n  selectedCards: Card[],\n  newWord: string\n): GameState {\n  const playerIndex = gameState.players.findIndex(p => p.id === playerId);\n  if (playerIndex === -1) return gameState;\n\n  // Find the word to extend\n  const wordToExtend = gameState.playedWords.find(word => word.id === wordId);\n  if (!wordToExtend) {\n    console.error('Word not found for extension');\n    return gameState;\n  }\n\n  // Validate that the new word can be formed by inserting selected cards into the original word\n  const selectedLetters = selectedCards.map(card => \n    card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  );\n  \n  if (!canFormExtendedWord(wordToExtend.word, selectedLetters, newWord)) {\n    console.error('New word cannot be formed by inserting the selected cards into the original word');\n    return gameState;\n  }\n\n  // Validate that the new word is valid\n  if (!isValidWord(newWord)) {\n    console.error('New word is not valid');\n    return gameState;\n  }\n\n  // Remove selected cards from player's hand\n  const updatedPlayers = [...gameState.players];\n  const player = { ...updatedPlayers[playerIndex] };\n  \n  const selectedCardIds = new Set(selectedCards.map(card => card.id));\n  player.hand = player.hand.filter(card => !selectedCardIds.has(card.id));\n  \n  // Calculate word score and add to player's score\n  const wordScore = selectedCards.reduce((total, card) => total + card.points, 0);\n  player.score += wordScore;\n  \n  updatedPlayers[playerIndex] = player;\n\n  // Create new extended word with proper card ordering\n  const effectiveCards = selectedCards.map(card => ({\n    ...card,\n    letter: card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n  }));\n\n  // Reconstruct the cards array to match the new word\n  const allCards = reconstructCardsForWord(wordToExtend.cards, effectiveCards, newWord);\n\n  const extendedWord: PlayedWord = {\n    id: `word_${Date.now()}`,\n    word: newWord,\n    cards: allCards,\n    playerId,\n    playerName: player.name,\n    score: wordScore,\n    timestamp: Date.now(),\n    position: wordToExtend.position\n  };\n\n  // Remove the original word and add the extended word\n  const updatedPlayedWords = gameState.playedWords.filter(word => word.id !== wordId);\n  updatedPlayedWords.push(extendedWord);\n\n  const gameStateWithExtension = {\n    ...gameState,\n    players: updatedPlayers,\n    playedWords: updatedPlayedWords\n  };\n\n  // End turn after extending a word\n  return endTurn(gameStateWithExtension);\n}\n\n "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 820, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/utils/keyboardHandlers.ts"],"sourcesContent":["import { Card, GameState } from '@/shared/types/game';\nimport { getCurrentPlayer } from '@/shared/gameLogic';\n\nexport interface KeyboardHandlerResult {\n  newSelectedCards: Set<string>;\n  shakeHand: boolean;\n  selectedCard?: Card;\n  deselectedCard?: Card;\n}\n\nexport function handleCardSelectionKeyPress(\n  event: KeyboardEvent,\n  selectedCards: Set<string>,\n  gameState: GameState\n): KeyboardHandlerResult {\n  const currentPlayer = getCurrentPlayer(gameState);\n  \n  // Only handle key presses when it's the current player's turn and game is playing\n  if (!currentPlayer.isCurrentTurn || gameState.gamePhase !== 'playing') {\n    return { newSelectedCards: selectedCards, shakeHand: false };\n  }\n  \n  const key = event.key.toUpperCase();\n  \n  // Handle backspace to deselect last card\n  if (event.key === 'Backspace') {\n    if (selectedCards.size > 0) {\n      const selectedCardsArray = Array.from(selectedCards).map(cardId => \n        currentPlayer.hand.find(card => card.id === cardId)!\n      );\n      const lastSelectedCard = selectedCardsArray[selectedCardsArray.length - 1];\n      \n      const newSelected = new Set(selectedCards);\n      newSelected.delete(lastSelectedCard.id);\n      \n      console.log('Last card deselected via backspace:', lastSelectedCard.letter, 'Selected cards:', Array.from(newSelected));\n      \n      return {\n        newSelectedCards: newSelected,\n        shakeHand: false,\n        deselectedCard: lastSelectedCard\n      };\n    }\n    return { newSelectedCards: selectedCards, shakeHand: false };\n  }\n  \n  // Check if the key matches any card in the current player's hand\n  const matchingCard = currentPlayer.hand.find(card => \n    card.letter === key || \n    (card.isMaster && card.assignedLetter === key)\n  );\n  \n  if (matchingCard) {\n    // Toggle selection of the matching card\n    const newSelected = new Set(selectedCards);\n    if (newSelected.has(matchingCard.id)) {\n      newSelected.delete(matchingCard.id);\n      console.log('Card deselected via keyboard:', matchingCard.letter, 'Selected cards:', Array.from(newSelected));\n      return {\n        newSelectedCards: newSelected,\n        shakeHand: false,\n        deselectedCard: matchingCard\n      };\n    } else {\n      newSelected.add(matchingCard.id);\n      console.log('Card selected via keyboard:', matchingCard.letter, 'Selected cards:', Array.from(newSelected));\n      return {\n        newSelectedCards: newSelected,\n        shakeHand: false,\n        selectedCard: matchingCard\n      };\n    }\n  } else {\n    // Visual feedback for invalid key\n    console.log('Invalid key pressed:', key, 'No matching card found');\n    return {\n      newSelectedCards: selectedCards,\n      shakeHand: true\n    };\n  }\n} "],"names":[],"mappings":";;;AACA;;AASO,SAAS,4BACd,KAAoB,EACpB,aAA0B,EAC1B,SAAoB;IAEpB,MAAM,gBAAgB,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD,EAAE;IAEvC,kFAAkF;IAClF,IAAI,CAAC,cAAc,aAAa,IAAI,UAAU,SAAS,KAAK,WAAW;QACrE,OAAO;YAAE,kBAAkB;YAAe,WAAW;QAAM;IAC7D;IAEA,MAAM,MAAM,MAAM,GAAG,CAAC,WAAW;IAEjC,yCAAyC;IACzC,IAAI,MAAM,GAAG,KAAK,aAAa;QAC7B,IAAI,cAAc,IAAI,GAAG,GAAG;YAC1B,MAAM,qBAAqB,MAAM,IAAI,CAAC,eAAe,GAAG,CAAC,CAAA,SACvD,cAAc,IAAI,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;YAE9C,MAAM,mBAAmB,kBAAkB,CAAC,mBAAmB,MAAM,GAAG,EAAE;YAE1E,MAAM,cAAc,IAAI,IAAI;YAC5B,YAAY,MAAM,CAAC,iBAAiB,EAAE;YAEtC,QAAQ,GAAG,CAAC,uCAAuC,iBAAiB,MAAM,EAAE,mBAAmB,MAAM,IAAI,CAAC;YAE1G,OAAO;gBACL,kBAAkB;gBAClB,WAAW;gBACX,gBAAgB;YAClB;QACF;QACA,OAAO;YAAE,kBAAkB;YAAe,WAAW;QAAM;IAC7D;IAEA,iEAAiE;IACjE,MAAM,eAAe,cAAc,IAAI,CAAC,IAAI,CAAC,CAAA,OAC3C,KAAK,MAAM,KAAK,OACf,KAAK,QAAQ,IAAI,KAAK,cAAc,KAAK;IAG5C,IAAI,cAAc;QAChB,wCAAwC;QACxC,MAAM,cAAc,IAAI,IAAI;QAC5B,IAAI,YAAY,GAAG,CAAC,aAAa,EAAE,GAAG;YACpC,YAAY,MAAM,CAAC,aAAa,EAAE;YAClC,QAAQ,GAAG,CAAC,iCAAiC,aAAa,MAAM,EAAE,mBAAmB,MAAM,IAAI,CAAC;YAChG,OAAO;gBACL,kBAAkB;gBAClB,WAAW;gBACX,gBAAgB;YAClB;QACF,OAAO;YACL,YAAY,GAAG,CAAC,aAAa,EAAE;YAC/B,QAAQ,GAAG,CAAC,+BAA+B,aAAa,MAAM,EAAE,mBAAmB,MAAM,IAAI,CAAC;YAC9F,OAAO;gBACL,kBAAkB;gBAClB,WAAW;gBACX,cAAc;YAChB;QACF;IACF,OAAO;QACL,kCAAkC;QAClC,QAAQ,GAAG,CAAC,wBAAwB,KAAK;QACzC,OAAO;YACL,kBAAkB;YAClB,WAAW;QACb;IACF;AACF","debugId":null}},
    {"offset": {"line": 894, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/Card.tsx"],"sourcesContent":["'use client';\n\nimport { motion } from 'framer-motion';\nimport { CardProps } from '@/shared/types/components';\n\nexport default function Card({ \n  card, \n  isSelected = false, \n  isPlayable = true, \n  isFaceDown = false,\n  onClick,\n  className = '',\n  size = 'md'\n}: CardProps) {\n  const sizeClasses = {\n    sm: 'w-10 h-14 text-xs',\n    md: 'w-12 h-16 text-sm',\n    lg: 'w-16 h-20 text-base'\n  };\n\n  const baseClasses = `\n    ${sizeClasses[size]}\n    border-2 rounded-lg flex flex-col items-center justify-center font-bold cursor-pointer\n    transition-all duration-200 select-none\n    ${isFaceDown ? 'bg-gray-800 border-gray-600' : ''}\n    ${!isFaceDown && !isPlayable ? 'opacity-50 cursor-not-allowed' : ''}\n    ${className}\n  `;\n\n  const cardColors = isFaceDown \n    ? 'bg-gray-800 border-gray-600 text-gray-300'\n    : card.isMaster\n    ? 'bg-gradient-to-br from-purple-400 to-purple-600 border-purple-500 text-white shadow-lg'\n    : 'bg-gradient-to-br from-blue-400 to-blue-600 border-blue-500 text-white shadow-md';\n\n  const selectedClasses = isSelected \n    ? 'ring-4 ring-yellow-400 ring-opacity-75 scale-110 shadow-xl' \n    : 'hover:scale-105 hover:shadow-lg';\n\n  const handleClick = () => {\n    if (onClick && isPlayable && !isFaceDown) {\n      onClick();\n    }\n  };\n\n  return (\n    <motion.div\n      className={`${baseClasses} ${cardColors} ${selectedClasses}`}\n      onClick={handleClick}\n      whileHover={isPlayable && !isFaceDown ? { scale: 1.05 } : {}}\n      whileTap={isPlayable && !isFaceDown ? { scale: 0.95 } : {}}\n      animate={{\n        scale: isSelected ? 1.1 : 1,\n        rotateY: isFaceDown ? 180 : 0\n      }}\n      transition={{ duration: 0.2 }}\n    >\n      {isFaceDown ? (\n        <div className=\"flex items-center justify-center w-full h-full\">\n          <div className=\"text-gray-400 text-xs\">🂠</div>\n        </div>\n      ) : (\n        <>\n          <div className=\"text-center leading-none\">\n            {card.isMaster \n              ? (card.assignedLetter ? card.assignedLetter : '★')\n              : card.letter\n            }\n          </div>\n          <div className=\"text-xs opacity-80 mt-1\">\n            {card.points}\n          </div>\n          {card.isMaster && (\n            <div className=\"text-[10px] opacity-60 mt-1 leading-none\">\n              {card.assignedLetter ? 'MASTER' : 'ASSIGN'}\n            </div>\n          )}\n        </>\n      )}\n    </motion.div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAKe,SAAS,KAAK,EAC3B,IAAI,EACJ,aAAa,KAAK,EAClB,aAAa,IAAI,EACjB,aAAa,KAAK,EAClB,OAAO,EACP,YAAY,EAAE,EACd,OAAO,IAAI,EACD;IACV,MAAM,cAAc;QAClB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;IAEA,MAAM,cAAc,CAAC;IACnB,EAAE,WAAW,CAAC,KAAK,CAAC;;;IAGpB,EAAE,aAAa,gCAAgC,GAAG;IAClD,EAAE,CAAC,cAAc,CAAC,aAAa,kCAAkC,GAAG;IACpE,EAAE,UAAU;EACd,CAAC;IAED,MAAM,aAAa,aACf,8CACA,KAAK,QAAQ,GACb,2FACA;IAEJ,MAAM,kBAAkB,aACpB,+DACA;IAEJ,MAAM,cAAc;QAClB,IAAI,WAAW,cAAc,CAAC,YAAY;YACxC;QACF;IACF;IAEA,qBACE,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;QACT,WAAW,GAAG,YAAY,CAAC,EAAE,WAAW,CAAC,EAAE,iBAAiB;QAC5D,SAAS;QACT,YAAY,cAAc,CAAC,aAAa;YAAE,OAAO;QAAK,IAAI,CAAC;QAC3D,UAAU,cAAc,CAAC,aAAa;YAAE,OAAO;QAAK,IAAI,CAAC;QACzD,SAAS;YACP,OAAO,aAAa,MAAM;YAC1B,SAAS,aAAa,MAAM;QAC9B;QACA,YAAY;YAAE,UAAU;QAAI;kBAE3B,2BACC,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;0BAAwB;;;;;;;;;;iCAGzC;;8BACE,6LAAC;oBAAI,WAAU;8BACZ,KAAK,QAAQ,GACT,KAAK,cAAc,GAAG,KAAK,cAAc,GAAG,MAC7C,KAAK,MAAM;;;;;;8BAGjB,6LAAC;oBAAI,WAAU;8BACZ,KAAK,MAAM;;;;;;gBAEb,KAAK,QAAQ,kBACZ,6LAAC;oBAAI,WAAU;8BACZ,KAAK,cAAc,GAAG,WAAW;;;;;;;;;;;;;AAOhD;KA5EwB","debugId":null}},
    {"offset": {"line": 999, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/PlayerArea.tsx"],"sourcesContent":["'use client';\n\nimport Card from './Card';\nimport { PlayerAreaProps } from '@/shared/types/components';\n\n\nexport default function PlayerArea({\n  player,\n  isCurrentPlayer,\n  isOpponent = false,\n  selectedCards = new Set(),\n  onCardClick,\n  shakeHand = false\n}: PlayerAreaProps) {\n  // Get selected cards array for word preview\n  const selectedCardsArray = Array.from(selectedCards)\n    .map(cardId => player.hand.find(card => card.id === cardId))\n    .filter((card): card is NonNullable<typeof card> => card !== undefined);\n      return (\n      <div className={`h-full flex flex-col overflow-hidden relative ${player.isCurrentTurn ? 'ring-2 ring-yellow-400 ring-opacity-75' : ''}`}>\n      {/* Player's Hand with integrated info */}\n      <div className={`flex-1 bg-white/5 backdrop-blur-sm rounded-lg p-2 mb-1 overflow-hidden ${\n        shakeHand ? 'animate-shake' : ''\n      }`}>\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <h4 className=\"text-white/80 text-xs\">\n              {isOpponent ? 'Opponent\\'s Hand' : 'Your Hand'}\n            </h4>\n            <span className=\"text-white/60 text-xs\">({player.hand.length})</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-white/80 text-xs\">\n              Score: {player.score}\n            </span>\n            {player.isCurrentTurn && (\n              <span className=\"bg-yellow-500 text-black text-xs px-2 py-0.5 rounded-full font-semibold\">\n                TURN\n              </span>\n            )}\n          </div>\n        </div>\n        <div className=\"flex gap-2 flex-wrap overflow-hidden p-4\">\n          {player.hand.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              isSelected={selectedCards.has(card.id)}\n              isFaceDown={isOpponent}\n              onClick={() => onCardClick?.(card, player.id)}\n              size={isOpponent ? \"sm\" : \"md\"}\n            />\n          ))}\n        </div>\n      </div>\n      \n      {/* Word Preview - Floating at bottom of player area */}\n      {isCurrentPlayer && selectedCardsArray.length > 0 && (\n        <div className=\"absolute bottom-1 right-1 bg-white/10 backdrop-blur-sm rounded px-1 py-0.5 border border-white/20\">\n          <div className=\"flex gap-0.5 justify-center\">\n            {selectedCardsArray.map((card) => (\n              <Card\n                key={card.id}\n                card={card}\n                size=\"sm\"\n              />\n            ))}\n          </div>\n          <p className=\"text-white font-semibold text-center text-xs\">\n            {selectedCardsArray.map(card => \n              card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n            ).join('')}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAMe,SAAS,WAAW,EACjC,MAAM,EACN,eAAe,EACf,aAAa,KAAK,EAClB,gBAAgB,IAAI,KAAK,EACzB,WAAW,EACX,YAAY,KAAK,EACD;IAChB,4CAA4C;IAC5C,MAAM,qBAAqB,MAAM,IAAI,CAAC,eACnC,GAAG,CAAC,CAAA,SAAU,OAAO,IAAI,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,SACnD,MAAM,CAAC,CAAC,OAA2C,SAAS;IAC3D,qBACA,6LAAC;QAAI,WAAW,CAAC,8CAA8C,EAAE,OAAO,aAAa,GAAG,2CAA2C,IAAI;;0BAEvI,6LAAC;gBAAI,WAAW,CAAC,uEAAuE,EACtF,YAAY,kBAAkB,IAC9B;;kCACA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDACX,aAAa,qBAAqB;;;;;;kDAErC,6LAAC;wCAAK,WAAU;;4CAAwB;4CAAE,OAAO,IAAI,CAAC,MAAM;4CAAC;;;;;;;;;;;;;0CAE/D,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;;4CAAwB;4CAC9B,OAAO,KAAK;;;;;;;oCAErB,OAAO,aAAa,kBACnB,6LAAC;wCAAK,WAAU;kDAA0E;;;;;;;;;;;;;;;;;;kCAMhG,6LAAC;wBAAI,WAAU;kCACZ,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,qBAChB,6LAAC,6HAAA,CAAA,UAAI;gCAEH,MAAM;gCACN,YAAY,cAAc,GAAG,CAAC,KAAK,EAAE;gCACrC,YAAY;gCACZ,SAAS,IAAM,cAAc,MAAM,OAAO,EAAE;gCAC5C,MAAM,aAAa,OAAO;+BALrB,KAAK,EAAE;;;;;;;;;;;;;;;;YAYnB,mBAAmB,mBAAmB,MAAM,GAAG,mBAC9C,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACZ,mBAAmB,GAAG,CAAC,CAAC,qBACvB,6LAAC,6HAAA,CAAA,UAAI;gCAEH,MAAM;gCACN,MAAK;+BAFA,KAAK,EAAE;;;;;;;;;;kCAMlB,6LAAC;wBAAE,WAAU;kCACV,mBAAmB,GAAG,CAAC,CAAA,OACtB,KAAK,QAAQ,IAAI,KAAK,cAAc,GAAG,KAAK,cAAc,GAAG,KAAK,MAAM,EACxE,IAAI,CAAC;;;;;;;;;;;;;;;;;;AAMnB;KAvEwB","debugId":null}},
    {"offset": {"line": 1157, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/GameStatus.tsx"],"sourcesContent":["'use client';\n\nimport { GameStatusProps } from '@/shared/types/components';\n\nexport default function GameStatus({ gameStatus }: GameStatusProps) {\n  if (!gameStatus) return null;\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded px-2 py-1\">\n      <div className=\"text-white text-xs\">\n        <span className=\"font-semibold\">Round {gameStatus.roundNumber}</span>\n      </div>\n      <div className=\"text-white/80 text-xs\">\n        Deck: {gameStatus.deckSize} | Discard: {gameStatus.discardSize}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAAA;;AAIe,SAAS,WAAW,EAAE,UAAU,EAAmB;IAChE,IAAI,CAAC,YAAY,OAAO;IAExB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAK,WAAU;;wBAAgB;wBAAO,WAAW,WAAW;;;;;;;;;;;;0BAE/D,6LAAC;gBAAI,WAAU;;oBAAwB;oBAC9B,WAAW,QAAQ;oBAAC;oBAAa,WAAW,WAAW;;;;;;;;;;;;;AAItE;KAbwB","debugId":null}},
    {"offset": {"line": 1218, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/PlayedWord.tsx"],"sourcesContent":["'use client';\n\nimport Card from './Card';\nimport { PlayedWordProps } from '@/shared/types/components';\n\nexport default function PlayedWord({ \n  playedWord, \n  playerName, \n  isSelected = false, \n  isExtendMode = false, \n  onClick \n}: PlayedWordProps) {\n  return (\n    <div \n      className={`\n        bg-white/20 backdrop-blur-sm rounded-lg p-2 cursor-pointer transition-all duration-200\n        ${isExtendMode ? 'animate-waddle hover:bg-white/30' : ''}\n        ${isSelected ? 'ring-2 ring-indigo-400 bg-indigo-500/30 shadow-lg' : ''}\n        ${onClick ? 'hover:scale-105' : ''}\n      `}\n      onClick={onClick}\n    >\n      <div className=\"flex gap-1 mb-1\">\n        {playedWord.cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            size=\"sm\"\n          />\n        ))}\n      </div>\n      <p className=\"text-white font-semibold text-center text-sm\">\n        {playedWord.word}\n      </p>\n      <p className=\"text-white/60 text-xs text-center\">\n        by {playerName}\n      </p>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAKe,SAAS,WAAW,EACjC,UAAU,EACV,UAAU,EACV,aAAa,KAAK,EAClB,eAAe,KAAK,EACpB,OAAO,EACS;IAChB,qBACE,6LAAC;QACC,WAAW,CAAC;;QAEV,EAAE,eAAe,qCAAqC,GAAG;QACzD,EAAE,aAAa,sDAAsD,GAAG;QACxE,EAAE,UAAU,oBAAoB,GAAG;MACrC,CAAC;QACD,SAAS;;0BAET,6LAAC;gBAAI,WAAU;0BACZ,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC,qBACrB,6LAAC,6HAAA,CAAA,UAAI;wBAEH,MAAM;wBACN,MAAK;uBAFA,KAAK,EAAE;;;;;;;;;;0BAMlB,6LAAC;gBAAE,WAAU;0BACV,WAAW,IAAI;;;;;;0BAElB,6LAAC;gBAAE,WAAU;;oBAAoC;oBAC3C;;;;;;;;;;;;;AAIZ;KAlCwB","debugId":null}},
    {"offset": {"line": 1289, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/PlayingField.tsx"],"sourcesContent":["'use client';\n\nimport GameStatus from './GameStatus';\nimport PlayedWord from './PlayedWord';\nimport { PlayingFieldProps } from '@/shared/types/components';\n\nexport default function PlayingField({ \n  playedWords, \n  players, \n  gameStatus, \n  isExtendMode = false, \n  selectedWordId = null, \n  onWordSelect \n}: PlayingFieldProps) {\n  return (\n    <div className=\"flex-1 bg-white/5 backdrop-blur-sm rounded-lg p-4 min-h-0 overflow-auto\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <h4 className=\"text-white/80 text-xs\">Playing Field</h4>\n        <GameStatus gameStatus={gameStatus} />\n      </div>\n      {playedWords.length === 0 ? (\n        <div className=\"flex items-center justify-center h-full\">\n          <p className=\"text-white/60 text-center text-sm\">\n            No words played yet.<br />\n            Start by playing a word from your hand!\n          </p>\n        </div>\n      ) : (\n        <div className=\"flex flex-wrap gap-3\">\n          {playedWords.map((playedWord) => {\n            const playerName = players.find(p => p.id === playedWord.playerId)?.name || 'Unknown Player';\n            return (\n              <PlayedWord\n                key={playedWord.id}\n                playedWord={playedWord}\n                playerName={playerName}\n                isSelected={selectedWordId === playedWord.id}\n                isExtendMode={isExtendMode}\n                onClick={isExtendMode ? () => onWordSelect?.(playedWord.id) : undefined}\n              />\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAMe,SAAS,aAAa,EACnC,WAAW,EACX,OAAO,EACP,UAAU,EACV,eAAe,KAAK,EACpB,iBAAiB,IAAI,EACrB,YAAY,EACM;IAClB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAwB;;;;;;kCACtC,6LAAC,mIAAA,CAAA,UAAU;wBAAC,YAAY;;;;;;;;;;;;YAEzB,YAAY,MAAM,KAAK,kBACtB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAE,WAAU;;wBAAoC;sCAC3B,6LAAC;;;;;wBAAK;;;;;;;;;;;qCAK9B,6LAAC;gBAAI,WAAU;0BACZ,YAAY,GAAG,CAAC,CAAC;oBAChB,MAAM,aAAa,QAAQ,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,WAAW,QAAQ,GAAG,QAAQ;oBAC5E,qBACE,6LAAC,mIAAA,CAAA,UAAU;wBAET,YAAY;wBACZ,YAAY;wBACZ,YAAY,mBAAmB,WAAW,EAAE;wBAC5C,cAAc;wBACd,SAAS,eAAe,IAAM,eAAe,WAAW,EAAE,IAAI;uBALzD,WAAW,EAAE;;;;;gBAQxB;;;;;;;;;;;;AAKV;KAxCwB","debugId":null}},
    {"offset": {"line": 1389, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/DeckAndControls.tsx"],"sourcesContent":["'use client';\n\nimport Card from './Card';\nimport { DeckAndControlsProps } from '@/shared/types/components';\n\nexport default function DeckAndControls({\n  deckSize,\n  discardPile,\n  tempDiscardedCard,\n  selectedCardsCount,\n  onPlayWord,\n  onExtendWord,\n  onCancelExtend,\n  onDiscard,\n  onDraw,\n  onDrawFromDiscard,\n  isCurrentTurn = true,\n  gamePhase = 'playing',\n  hasDiscardedThisTurn = false,\n  hasPlayedWords = false,\n  isExtendMode = false\n}: DeckAndControlsProps) {\n  console.log('DeckAndControls - selectedCardsCount:', selectedCardsCount);\n  return (\n    <div className=\"h-full bg-white/10 backdrop-blur-sm rounded-lg p-2 flex flex-col justify-between border border-white/20\">\n      {/* Deck and Discard */}\n              <div className=\"space-y-1\">\n        <div className=\"text-center\">\n          <div className={`w-8 h-12 border-2 rounded-lg flex items-center justify-center mb-1 ${\n            deckSize > 0 \n              ? 'bg-blue-800 border-blue-600' \n              : 'bg-gray-600 border-gray-500'\n          }`}>\n            <span className=\"text-white text-xs\">🂠</span>\n          </div>\n          <p className=\"text-white/80 text-xs\">Deck ({deckSize})</p>\n        </div>\n        \n        <div className=\"text-center\">\n          {discardPile.length > 0 && (\n            <Card\n              card={discardPile[discardPile.length - 1]}\n              size=\"sm\"\n            />\n          )}\n          <p className=\"text-white/80 text-xs mt-1\">Discard</p>\n        </div>\n        \n        {/* Show temporarily discarded card */}\n        {tempDiscardedCard && (\n          <div className=\"text-center\">\n            <Card\n              card={tempDiscardedCard}\n              size=\"sm\"\n            />\n            <p className=\"text-white/80 text-xs mt-1\">Just Discarded</p>\n          </div>\n        )}\n      </div>\n\n      {/* Game Controls */}\n      <div className=\"space-y-2\">\n        <button\n          onClick={onPlayWord}\n          disabled={selectedCardsCount === 0 || !isCurrentTurn || gamePhase !== 'playing'}\n          className=\"w-full px-2 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm font-semibold\"\n        >\n          Play Word\n        </button>\n        {isExtendMode ? (\n          <button\n            onClick={onCancelExtend}\n            className=\"w-full px-2 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors text-sm\"\n          >\n            Cancel Extend\n          </button>\n        ) : (\n          <button\n            onClick={onExtendWord}\n            disabled={!isCurrentTurn || gamePhase !== 'playing' || !hasPlayedWords}\n            className=\"w-full px-2 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm\"\n          >\n            Extend Word\n          </button>\n        )}\n        <button\n          onClick={onDiscard}\n          disabled={selectedCardsCount !== 1 || !isCurrentTurn || gamePhase !== 'playing'}\n          className=\"w-full px-2 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm\"\n        >\n          Discard\n        </button>\n        {hasDiscardedThisTurn && isCurrentTurn && gamePhase === 'playing' ? (\n          // Show both draw options after discarding\n          <div className=\"space-y-1\">\n            <button\n              onClick={onDraw}\n              disabled={deckSize === 0}\n              className=\"w-full px-2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm\"\n            >\n              Draw from Deck {deckSize > 0 ? `(${deckSize})` : '(Empty)'}\n            </button>\n            <button\n              onClick={onDrawFromDiscard}\n              disabled={discardPile.length < 1}\n              className=\"w-full px-2 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm\"\n            >\n              Draw from Discard {discardPile.length >= 1 ? '(Top Card)' : '(Empty)'}\n            </button>\n          </div>\n        ) : (\n          // Show single draw button when not discarded yet\n          <button\n            onClick={onDraw}\n            disabled={deckSize === 0 || !isCurrentTurn || gamePhase !== 'playing' || !hasDiscardedThisTurn}\n            className=\"w-full px-2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm\"\n          >\n            Draw {deckSize > 0 ? `(${deckSize})` : '(Empty)'}\n            {!hasDiscardedThisTurn && isCurrentTurn && gamePhase === 'playing' && deckSize > 0 && (\n              <span className=\"block text-xs opacity-75\">(Discard first)</span>\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAKe,SAAS,gBAAgB,EACtC,QAAQ,EACR,WAAW,EACX,iBAAiB,EACjB,kBAAkB,EAClB,UAAU,EACV,YAAY,EACZ,cAAc,EACd,SAAS,EACT,MAAM,EACN,iBAAiB,EACjB,gBAAgB,IAAI,EACpB,YAAY,SAAS,EACrB,uBAAuB,KAAK,EAC5B,iBAAiB,KAAK,EACtB,eAAe,KAAK,EACC;IACrB,QAAQ,GAAG,CAAC,yCAAyC;IACrD,qBACE,6LAAC;QAAI,WAAU;;0BAEL,6LAAC;gBAAI,WAAU;;kCACrB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAW,CAAC,mEAAmE,EAClF,WAAW,IACP,gCACA,+BACJ;0CACA,cAAA,6LAAC;oCAAK,WAAU;8CAAqB;;;;;;;;;;;0CAEvC,6LAAC;gCAAE,WAAU;;oCAAwB;oCAAO;oCAAS;;;;;;;;;;;;;kCAGvD,6LAAC;wBAAI,WAAU;;4BACZ,YAAY,MAAM,GAAG,mBACpB,6LAAC,6HAAA,CAAA,UAAI;gCACH,MAAM,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE;gCACzC,MAAK;;;;;;0CAGT,6LAAC;gCAAE,WAAU;0CAA6B;;;;;;;;;;;;oBAI3C,mCACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,6HAAA,CAAA,UAAI;gCACH,MAAM;gCACN,MAAK;;;;;;0CAEP,6LAAC;gCAAE,WAAU;0CAA6B;;;;;;;;;;;;;;;;;;0BAMhD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,SAAS;wBACT,UAAU,uBAAuB,KAAK,CAAC,iBAAiB,cAAc;wBACtE,WAAU;kCACX;;;;;;oBAGA,6BACC,6LAAC;wBACC,SAAS;wBACT,WAAU;kCACX;;;;;6CAID,6LAAC;wBACC,SAAS;wBACT,UAAU,CAAC,iBAAiB,cAAc,aAAa,CAAC;wBACxD,WAAU;kCACX;;;;;;kCAIH,6LAAC;wBACC,SAAS;wBACT,UAAU,uBAAuB,KAAK,CAAC,iBAAiB,cAAc;wBACtE,WAAU;kCACX;;;;;;oBAGA,wBAAwB,iBAAiB,cAAc,YACtD,0CAA0C;kCAC1C,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,SAAS;gCACT,UAAU,aAAa;gCACvB,WAAU;;oCACX;oCACiB,WAAW,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG;;;;;;;0CAEnD,6LAAC;gCACC,SAAS;gCACT,UAAU,YAAY,MAAM,GAAG;gCAC/B,WAAU;;oCACX;oCACoB,YAAY,MAAM,IAAI,IAAI,eAAe;;;;;;;;;;;;+BAIhE,iDAAiD;kCACjD,6LAAC;wBACC,SAAS;wBACT,UAAU,aAAa,KAAK,CAAC,iBAAiB,cAAc,aAAa,CAAC;wBAC1E,WAAU;;4BACX;4BACO,WAAW,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG;4BACtC,CAAC,wBAAwB,iBAAiB,cAAc,aAAa,WAAW,mBAC/E,6LAAC;gCAAK,WAAU;0CAA2B;;;;;;;;;;;;;;;;;;;;;;;;AAOzD;KAzHwB","debugId":null}},
    {"offset": {"line": 1620, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/MasterCardModal.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/shared/types/game';\n\ninterface MasterCardModalProps {\n  isOpen: boolean;\n  masterCard: Card | null;\n  onClose: () => void;\n  onAssignLetter: (cardId: string, letter: string) => void;\n}\n\nconst LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nexport default function MasterCardModal({\n  isOpen,\n  masterCard,\n  onClose,\n  onAssignLetter\n}: MasterCardModalProps) {\n  const [selectedLetter, setSelectedLetter] = useState<string>('');\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedLetter('');\n    }\n  }, [isOpen]);\n\n  const handleLetterSelect = (letter: string) => {\n    setSelectedLetter(letter);\n  };\n\n  const handleConfirm = () => {\n    if (selectedLetter && masterCard) {\n      onAssignLetter(masterCard.id, selectedLetter);\n      onClose();\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    const key = e.key.toUpperCase();\n    if (LETTERS.includes(key)) {\n      setSelectedLetter(key);\n    } else if (e.key === 'Enter' && selectedLetter) {\n      handleConfirm();\n    } else if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  if (!isOpen || !masterCard) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-96 max-w-[90vw]\">\n        <h2 className=\"text-xl font-semibold mb-4\">Assign Letter to Master Card</h2>\n        \n        {/* Master Card Display */}\n        <div className=\"mb-6 flex justify-center\">\n          <div className=\"w-16 h-20 bg-gradient-to-br from-purple-400 to-purple-600 border-2 border-purple-500 rounded-lg flex flex-col items-center justify-center text-white font-bold shadow-lg\">\n            <div className=\"text-center leading-none\">\n              ★\n            </div>\n            <div className=\"text-xs opacity-80 mt-1\">\n              {masterCard.points}\n            </div>\n            <div className=\"text-[10px] opacity-60 mt-1 leading-none\">\n              MASTER\n            </div>\n          </div>\n        </div>\n\n        {/* Letter Selection */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Choose a letter to assign:\n          </label>\n          <div className=\"grid grid-cols-9 gap-2 max-h-48 overflow-y-auto\">\n            {LETTERS.map((letter) => (\n              <button\n                key={letter}\n                onClick={() => handleLetterSelect(letter)}\n                onKeyDown={handleKeyPress}\n                className={`w-8 h-8 border-2 rounded-md font-bold text-sm transition-colors ${\n                  selectedLetter === letter\n                    ? 'bg-purple-600 border-purple-700 text-white'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {letter}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mb-6 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n          <p className=\"text-blue-700 text-sm\">\n            <strong>Note:</strong> Once assigned, this master card will always represent the letter &quot;{selectedLetter || '?'}&quot; for the rest of the game.\n          </p>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"flex gap-3 justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleConfirm}\n            disabled={!selectedLetter}\n            className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            Assign Letter\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAYA,MAAM,UAAU;IAAC;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;CAAI;AAEnI,SAAS,gBAAgB,EACtC,MAAM,EACN,UAAU,EACV,OAAO,EACP,cAAc,EACO;;IACrB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAE7D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,QAAQ;gBACV,kBAAkB;YACpB;QACF;oCAAG;QAAC;KAAO;IAEX,MAAM,qBAAqB,CAAC;QAC1B,kBAAkB;IACpB;IAEA,MAAM,gBAAgB;QACpB,IAAI,kBAAkB,YAAY;YAChC,eAAe,WAAW,EAAE,EAAE;YAC9B;QACF;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,MAAM,MAAM,EAAE,GAAG,CAAC,WAAW;QAC7B,IAAI,QAAQ,QAAQ,CAAC,MAAM;YACzB,kBAAkB;QACpB,OAAO,IAAI,EAAE,GAAG,KAAK,WAAW,gBAAgB;YAC9C;QACF,OAAO,IAAI,EAAE,GAAG,KAAK,UAAU;YAC7B;QACF;IACF;IAEA,IAAI,CAAC,UAAU,CAAC,YAAY,OAAO;IAEnC,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAA6B;;;;;;8BAG3C,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CAA2B;;;;;;0CAG1C,6LAAC;gCAAI,WAAU;0CACZ,WAAW,MAAM;;;;;;0CAEpB,6LAAC;gCAAI,WAAU;0CAA2C;;;;;;;;;;;;;;;;;8BAO9D,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,WAAU;sCAA+C;;;;;;sCAGhE,6LAAC;4BAAI,WAAU;sCACZ,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC;oCAEC,SAAS,IAAM,mBAAmB;oCAClC,WAAW;oCACX,WAAW,CAAC,gEAAgE,EAC1E,mBAAmB,SACf,+CACA,+DACJ;8CAED;mCATI;;;;;;;;;;;;;;;;8BAgBb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAE,WAAU;;0CACX,6LAAC;0CAAO;;;;;;4BAAc;4BAAyE,kBAAkB;4BAAI;;;;;;;;;;;;8BAKzH,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BACC,SAAS;4BACT,WAAU;sCACX;;;;;;sCAGD,6LAAC;4BACC,SAAS;4BACT,UAAU,CAAC;4BACX,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;;AAOX;GA3GwB;KAAA","debugId":null}},
    {"offset": {"line": 1855, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/TurnIndicator.tsx"],"sourcesContent":["'use client';\n\nimport { GameState } from '@/shared/types/game';\nimport { getCurrentPlayer } from '@/shared/gameLogic';\n\ninterface TurnIndicatorProps {\n  gameState: GameState;\n  onEndTurn?: () => void;\n  onStartGame?: () => void;\n  onNewGame?: () => void;\n}\n\nexport default function TurnIndicator({\n  gameState,\n  onEndTurn,\n  onStartGame,\n  onNewGame\n}: TurnIndicatorProps) {\n  const currentPlayer = getCurrentPlayer(gameState);\n\n  const getPhaseDisplay = () => {\n    switch (gameState.gamePhase) {\n      case 'lobby':\n        return { text: 'Game Lobby', color: 'bg-blue-600', action: 'Start Game' };\n      case 'playing':\n        return { text: 'Game in Progress', color: 'bg-green-600', action: 'End Turn' };\n      case 'roundEnd':\n        return { text: 'Round Ended', color: 'bg-yellow-600', action: 'Next Round' };\n      case 'gameOver':\n        return { text: 'Game Over', color: 'bg-red-600', action: 'New Game' };\n      default:\n        return { text: 'Unknown', color: 'bg-gray-600', action: '' };\n    }\n  };\n\n  const phaseInfo = getPhaseDisplay();\n\n  const handleAction = () => {\n    switch (gameState.gamePhase) {\n      case 'lobby':\n        onStartGame?.();\n        break;\n      case 'playing':\n        onEndTurn?.();\n        break;\n      case 'gameOver':\n        onNewGame?.();\n        break;\n    }\n  };\n\n  if (gameState.gamePhase === 'gameOver') {\n    const winner = gameState.players.find(p => p.id === gameState.winner);\n    return (\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20\">\n        <div className=\"text-center\">\n          <h3 className=\"text-white font-bold text-lg mb-2\">Game Over!</h3>\n          {winner && (\n            <p className=\"text-white/80 mb-3\">\n              Winner: <span className=\"font-semibold text-yellow-400\">{winner.name}</span>\n            </p>\n          )}\n          <div className=\"space-y-2\">\n            {gameState.players.map(player => (\n              <div key={player.id} className=\"flex justify-between text-white/70 text-sm\">\n                <span>{player.name}</span>\n                <span className=\"font-semibold\">{player.score} points</span>\n              </div>\n            ))}\n          </div>\n          <button\n            onClick={handleAction}\n            className=\"mt-4 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n          >\n            New Game\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/20\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center gap-2\">\n          <div className={`w-3 h-3 rounded-full ${phaseInfo.color}`}></div>\n          <span className=\"text-white/80 text-sm font-medium\">{phaseInfo.text}</span>\n        </div>\n        <span className=\"text-white/60 text-xs\">Round {gameState.roundNumber}</span>\n      </div>\n      \n      {gameState.gamePhase === 'playing' && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 text-sm\">Current Turn:</span>\n            <span className=\"text-white font-semibold\">{currentPlayer.name}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 text-sm\">Cards in Hand:</span>\n            <span className=\"text-white font-semibold\">{currentPlayer.hand.length}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 text-sm\">Score:</span>\n            <span className=\"text-white font-semibold\">{currentPlayer.score}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-white/70 text-sm\">Discard Status:</span>\n            <span className={`font-semibold ${currentPlayer.hasDiscardedThisTurn ? 'text-green-400' : 'text-red-400'}`}>\n              {currentPlayer.hasDiscardedThisTurn ? '✓ Discarded' : '✗ Not Discarded'}\n            </span>\n          </div>\n          \n          <button\n            onClick={handleAction}\n            className=\"w-full mt-2 px-3 py-1.5 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors text-sm font-medium\"\n          >\n            End Turn\n          </button>\n        </div>\n      )}\n      \n      {gameState.gamePhase === 'lobby' && (\n        <button\n          onClick={handleAction}\n          className=\"w-full px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors text-sm font-medium\"\n        >\n          Start Game\n        </button>\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2194, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/ExtendWordModal.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card as CardType, PlayedWord } from '@/shared/types/game';\nimport { isValidWord, canFormExtendedWord } from '@/shared/gameLogic';\nimport Card from './Card';\n\ninterface ExtendWordModalProps {\n  isOpen: boolean;\n  selectedCards: CardType[];\n  wordToExtend: PlayedWord | null;\n  onClose: () => void;\n  onConfirm: (newWord: string) => void;\n}\n\nexport default function ExtendWordModal({\n  isOpen,\n  selectedCards,\n  wordToExtend,\n  onClose,\n  onConfirm\n}: ExtendWordModalProps) {\n  const [newWord, setNewWord] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (isOpen && wordToExtend) {\n      // Pre-populate with the original word\n      setNewWord(wordToExtend.word);\n      setError('');\n    }\n  }, [isOpen, wordToExtend]);\n\n  const handleWordChange = (value: string) => {\n    const upperWord = value.toUpperCase();\n    setNewWord(upperWord);\n    setError('');\n  };\n\n  const handleConfirm = () => {\n    if (!wordToExtend) return;\n\n    // Validate word\n    if (!isValidWord(newWord)) {\n      setError('Word must be at least 2 letters long and contain only letters.');\n      return;\n    }\n\n    // Get the letters from selected cards\n    const selectedLetters = selectedCards.map(card => \n      card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n    );\n\n    // Check if the new word can be formed by inserting selected letters into the original word\n    if (!canFormExtendedWord(wordToExtend.word, selectedLetters, newWord)) {\n      setError(`New word cannot be formed by inserting the selected letters into \"${wordToExtend.word}\".`);\n      return;\n    }\n\n    // Check if the new word is different from the original\n    if (newWord === wordToExtend.word) {\n      setError('New word must be different from the original word.');\n      return;\n    }\n\n    onConfirm(newWord);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleConfirm();\n    } else if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  if (!isOpen || !wordToExtend) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-96 max-w-[90vw]\">\n        <h2 className=\"text-xl font-semibold mb-4\">Extend Word</h2>\n        \n        {/* Original Word */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-600 mb-2\">Original Word:</p>\n          <div className=\"flex gap-1 mb-2\">\n            {wordToExtend.cards.map((card) => (\n              <Card\n                key={card.id}\n                card={card}\n                size=\"sm\"\n              />\n            ))}\n          </div>\n          <p className=\"text-lg font-semibold text-gray-800\">{wordToExtend.word}</p>\n        </div>\n\n        {/* Selected Cards */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-600 mb-2\">Cards to Add:</p>\n          <div className=\"flex gap-1 mb-2\">\n            {selectedCards.map((card) => (\n              <Card\n                key={card.id}\n                card={card}\n                size=\"sm\"\n              />\n            ))}\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            Letters: {selectedCards.map((card: CardType) => \n              card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n            ).join('')}\n          </p>\n        </div>\n\n        {/* New Word Input */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            New Extended Word:\n          </label>\n          <div className=\"text-xs text-gray-600 mb-2\">\n            💡 <strong>Tip:</strong> The original word is pre-filled. Click anywhere in the word to position your cursor, then type your new letters.\n          </div>\n          <input\n            type=\"text\"\n            value={newWord}\n            onChange={(e) => handleWordChange(e.target.value)}\n            onKeyDown={handleKeyPress}\n            placeholder=\"Click to position cursor and type your new letters\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500\"\n            autoFocus\n          />\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n            <p className=\"text-red-600 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Word Preview */}\n        {newWord && !error && (\n          <div className=\"mb-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n            <p className=\"text-green-700 text-sm\">\n              <strong>Preview:</strong> {newWord}\n            </p>\n            <p className=\"text-green-600 text-xs\">\n              Length: {newWord.length} letters\n            </p>\n          </div>\n        )}\n\n        {/* Buttons */}\n        <div className=\"flex gap-3 justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleConfirm}\n            disabled={!newWord.trim()}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            Extend Word\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2508, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/components/GameBoard.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { GameState, Card as CardType, PlayedWord } from '@/shared/types/game';\nimport { getCurrentPlayer, playWordWithValidation, extendWordWithValidation, isValidWord, discardCard, drawCard, drawFromDiscard, endTurn, startGame } from '@/shared/gameLogic';\nimport { handleCardSelectionKeyPress } from '@/utils/keyboardHandlers';\nimport PlayerArea from './PlayerArea';\nimport PlayingField from './PlayingField';\nimport DeckAndControls from './DeckAndControls';\nimport MasterCardModal from './MasterCardModal';\nimport TurnIndicator from './TurnIndicator';\nimport ExtendWordModal from './ExtendWordModal';\nimport { GameBoardProps } from '@/shared/types/components';\n\nexport default function GameBoard({ \n  gameState, \n  onCardSelect, \n  onPlayWord, \n  onDiscard, \n  onDraw,\n  onGameStateUpdate\n}: GameBoardProps) {\n  const [selectedCards, setSelectedCards] = useState<Set<string>>(new Set());\n  const [shakeHand, setShakeHand] = useState(false);\n  const [masterCardModal, setMasterCardModal] = useState<{ isOpen: boolean; card: CardType | null }>({\n    isOpen: false,\n    card: null\n  });\n  const [extendWordModal, setExtendWordModal] = useState<{ isOpen: boolean; wordToExtend: PlayedWord | null }>({\n    isOpen: false,\n    wordToExtend: null\n  });\n  const [extendMode, setExtendMode] = useState(false);\n  const [selectedWordId, setSelectedWordId] = useState<string | null>(null);\n  const [notification, setNotification] = useState<{ message: string; type: 'success' | 'error' } | null>(null);\n  const currentPlayer = getCurrentPlayer(gameState);\n\n  const handleCardClick = (card: CardType, playerId: string) => {\n    // Only allow actions during current player's turn and when game is playing\n    if (playerId === currentPlayer.id && gameState.gamePhase === 'playing') {\n      // Check if this is an unassigned master card\n      if (card.isMaster && !card.assignedLetter) {\n        setMasterCardModal({ isOpen: true, card });\n        return;\n      }\n\n      const newSelected = new Set(selectedCards);\n      if (newSelected.has(card.id)) {\n        newSelected.delete(card.id);\n      } else {\n        newSelected.add(card.id);\n      }\n      setSelectedCards(newSelected);\n      console.log('Card clicked:', card.letter, 'Selected cards:', Array.from(newSelected));\n      onCardSelect?.(card, playerId);\n    }\n  };\n\n  const handleKeyPress = useCallback((event: KeyboardEvent) => {\n    const result = handleCardSelectionKeyPress(event, selectedCards, gameState);\n    \n    setSelectedCards(result.newSelectedCards);\n    \n    if (result.shakeHand) {\n      setShakeHand(true);\n      setTimeout(() => setShakeHand(false), 500); // Stop shaking after 500ms\n    }\n    \n    // Call onCardSelect callback if a card was selected or deselected\n    if (result.selectedCard) {\n      onCardSelect?.(result.selectedCard, currentPlayer.id);\n    } else if (result.deselectedCard) {\n      onCardSelect?.(result.deselectedCard, currentPlayer.id);\n    }\n  }, [selectedCards, gameState, onCardSelect, currentPlayer.id]);\n\n  // Add keyboard event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [selectedCards, currentPlayer, handleKeyPress]);\n\n  const gameStatus = {\n    roundNumber: gameState.roundNumber,\n    currentPlayerName: currentPlayer.name,\n    deckSize: gameState.deck.length,\n    discardSize: gameState.discardPile.length\n  };\n\n  const handleAssignLetter = (cardId: string, letter: string) => {\n    // Update the card in the game state\n    const updatedGameState = {\n      ...gameState,\n      players: gameState.players.map(player => ({\n        ...player,\n        hand: player.hand.map(card => \n          card.id === cardId \n            ? { ...card, assignedLetter: letter }\n            : card\n        )\n      }))\n    };\n    \n    // Update the game state\n    onGameStateUpdate?.(updatedGameState);\n    \n    // Close the modal\n    setMasterCardModal({ isOpen: false, card: null });\n    \n    console.log(`Master card ${cardId} assigned letter: ${letter}`);\n  };\n\n  const handlePlayWordClick = async () => {\n    // Only allow during current player's turn and when game is playing\n    if (gameState.gamePhase !== 'playing' || !currentPlayer.isCurrentTurn) return;\n    \n    if (selectedCards.size === 0) return;\n    \n    const selectedCardsArray = Array.from(selectedCards).map(cardId => \n      currentPlayer.hand.find(card => card.id === cardId)!\n    );\n    \n    // Generate the word from selected cards (use assigned letter for master cards)\n    const word = selectedCardsArray.map(card => \n      card.isMaster && card.assignedLetter ? card.assignedLetter : card.letter\n    ).join('');\n    \n    // Basic validation first\n    if (!isValidWord(word)) {\n      setNotification({ message: 'Word must be at least 2 letters long', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      return;\n    }\n    \n    // Show loading notification\n    setNotification({ message: 'Checking word validity...', type: 'success' });\n    \n    // Play the word with dictionary validation\n    const result = await playWordWithValidation(gameState, currentPlayer.id, selectedCardsArray, word);\n    \n    if (result.success) {\n      // Update the game state\n      onGameStateUpdate?.(result.gameState);\n      \n      // Call the parent's onPlayWord callback\n      onPlayWord?.();\n      \n      // Clear selection after playing\n      setSelectedCards(new Set());\n      \n      // Show success notification\n      setNotification({ message: `Word \"${word}\" played successfully!`, type: 'success' });\n      setTimeout(() => setNotification(null), 3000);\n    } else {\n      // Show error notification\n      setNotification({ message: result.error || 'Failed to play word', type: 'error' });\n      setTimeout(() => setNotification(null), 4000);\n    }\n  };\n\n  const handleExtendWordClick = () => {\n    // Only allow during current player's turn and when game is playing\n    if (gameState.gamePhase !== 'playing' || !currentPlayer.isCurrentTurn) return;\n    \n    // Check if there are any played words to extend\n    if (gameState.playedWords.length === 0) {\n      setNotification({ message: 'No words on the board to extend', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      return;\n    }\n    \n    // Enter extend mode - words will start waddling\n    setExtendMode(true);\n    setSelectedWordId(null);\n    \n    // Show notification\n    setNotification({ message: 'Click on a word to extend it', type: 'success' });\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  const handleExtendWordConfirm = async (newWord: string) => {\n    if (!extendWordModal.wordToExtend) return;\n    \n    const selectedCardsArray = Array.from(selectedCards).map(cardId => \n      currentPlayer.hand.find(card => card.id === cardId)!\n    );\n    \n    // Show loading notification\n    setNotification({ message: 'Checking word validity...', type: 'success' });\n    \n    // Extend the word with dictionary validation\n    const result = await extendWordWithValidation(\n      gameState, \n      currentPlayer.id, \n      extendWordModal.wordToExtend.id, \n      selectedCardsArray, \n      newWord\n    );\n    \n    if (result.success) {\n      // Update the game state\n      onGameStateUpdate?.(result.gameState);\n      \n      // Close the modal\n      setExtendWordModal({ isOpen: false, wordToExtend: null });\n      \n      // Clear selection after extending\n      setSelectedCards(new Set());\n      \n      // Show success notification\n      setNotification({ message: `Extended word to: \"${newWord}\"!`, type: 'success' });\n      setTimeout(() => setNotification(null), 3000);\n    } else {\n      // Show error notification\n      setNotification({ message: result.error || 'Failed to extend word', type: 'error' });\n      setTimeout(() => setNotification(null), 4000);\n    }\n  };\n\n  const handleWordSelect = (wordId: string) => {\n    if (!extendMode) return;\n    \n    // Find the word to extend\n    const wordToExtend = gameState.playedWords.find(word => word.id === wordId);\n    if (!wordToExtend) return;\n    \n    // Set the selected word\n    setSelectedWordId(wordId);\n    \n    // Open the extend word modal\n    setExtendWordModal({ isOpen: true, wordToExtend });\n    \n    // Exit extend mode\n    setExtendMode(false);\n  };\n\n  const handleExtendWordCancel = () => {\n    // Exit extend mode\n    setExtendMode(false);\n    setSelectedWordId(null);\n  };\n\n  const handleDiscardClick = () => {\n    // Only allow during current player's turn and when game is playing\n    if (gameState.gamePhase !== 'playing' || !currentPlayer.isCurrentTurn) return;\n    \n    if (selectedCards.size !== 1) return;\n    \n    const selectedCardId = Array.from(selectedCards)[0];\n    const cardToDiscard = currentPlayer.hand.find(card => card.id === selectedCardId);\n    \n    if (!cardToDiscard) return;\n    \n    // Discard the card and update game state\n    const newGameState = discardCard(gameState, currentPlayer.id, cardToDiscard);\n    \n    // Update the game state\n    onGameStateUpdate?.(newGameState);\n    \n    // Call the parent's onDiscard callback\n    onDiscard?.();\n    \n    // Clear selection after discarding\n    setSelectedCards(new Set());\n    \n    // Show notification\n    setNotification({ message: `Discarded: ${cardToDiscard.letter}. You can now draw a card.`, type: 'success' });\n    setTimeout(() => setNotification(null), 3000);\n    \n    console.log(`Card discarded: ${cardToDiscard.letter}`);\n  };\n\n  const handleDrawClick = () => {\n    // Only allow during current player's turn and when game is playing\n    if (gameState.gamePhase !== 'playing' || !currentPlayer.isCurrentTurn) return;\n    \n    // Check if player has discarded this turn\n    if (!currentPlayer.hasDiscardedThisTurn) {\n      setNotification({ message: 'Must discard a card before drawing', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      console.log('Cannot draw: must discard first');\n      return;\n    }\n    \n    // Check if deck is empty\n    if (gameState.deck.length === 0) {\n      setNotification({ message: 'Cannot draw: deck is empty', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      console.log('Cannot draw: deck is empty');\n      return;\n    }\n    \n    // Draw a card and update game state\n    const newGameState = drawCard(gameState, currentPlayer.id);\n    \n    // Update the game state\n    onGameStateUpdate?.(newGameState);\n    \n    // Call the parent's onDraw callback\n    onDraw?.();\n    \n    // Show notification\n    setNotification({ message: 'Card drawn from deck', type: 'success' });\n    setTimeout(() => setNotification(null), 2000);\n    \n    console.log('Card drawn from deck');\n  };\n\n  const handleDrawFromDiscardClick = () => {\n    // Only allow during current player's turn and when game is playing\n    if (gameState.gamePhase !== 'playing' || !currentPlayer.isCurrentTurn) return;\n    \n    // Check if player has discarded this turn\n    if (!currentPlayer.hasDiscardedThisTurn) {\n      setNotification({ message: 'Must discard a card before drawing', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      console.log('Cannot draw from discard: must discard first');\n      return;\n    }\n    \n    // Check if discard pile has at least 1 card\n    if (gameState.discardPile.length < 1) {\n      setNotification({ message: 'Cannot draw from discard: discard pile is empty', type: 'error' });\n      setTimeout(() => setNotification(null), 2000);\n      console.log('Cannot draw from discard: discard pile is empty');\n      return;\n    }\n    \n    // Draw from discard and update game state\n    const newGameState = drawFromDiscard(gameState, currentPlayer.id);\n    \n    // Update the game state\n    onGameStateUpdate?.(newGameState);\n    \n    // Call the parent's onDraw callback\n    onDraw?.();\n    \n    // Show notification\n    setNotification({ message: 'Card drawn from discard pile', type: 'success' });\n    setTimeout(() => setNotification(null), 2000);\n    \n    console.log('Card drawn from discard pile');\n  };\n\n  const handleEndTurn = () => {\n    const newGameState = endTurn(gameState);\n    onGameStateUpdate?.(newGameState);\n    \n    // Clear selection when turn ends\n    setSelectedCards(new Set());\n    \n    // Show notification\n    const nextPlayer = getCurrentPlayer(newGameState);\n    setNotification({ message: `Turn ended. ${nextPlayer.name}'s turn now.`, type: 'success' });\n    setTimeout(() => setNotification(null), 2000);\n    \n    console.log('Turn ended');\n  };\n\n  const handleStartGame = () => {\n    const newGameState = startGame([gameState.players[0].name, gameState.players[1].name]);\n    onGameStateUpdate?.(newGameState);\n    \n    setNotification({ message: 'Game started!', type: 'success' });\n    setTimeout(() => setNotification(null), 2000);\n    \n    console.log('Game started');\n  };\n\n  const handleNewGame = () => {\n    // Reset to lobby state\n    const resetGameState: GameState = {\n      ...gameState,\n      gamePhase: 'lobby',\n      winner: null,\n      playedWords: [],\n      roundNumber: 1\n    };\n    onGameStateUpdate?.(resetGameState);\n    \n    setNotification({ message: 'New game ready!', type: 'success' });\n    setTimeout(() => setNotification(null), 2000);\n    \n    console.log('New game prepared');\n  };\n\n  return (\n    <div className=\"w-full h-full bg-gradient-to-br from-green-800 to-green-600 p-2 min-h-0 overflow-hidden relative\">\n      {/* Top Player Area (Opponent) - Fixed Height */}\n      <div className=\"h-28 flex-shrink-0\">\n        <PlayerArea\n          player={gameState.players[1]}\n          isCurrentPlayer={false}\n          isOpponent={true}\n        />\n      </div>\n\n      {/* Central Game Area - Flexible, takes remaining space */}\n      <div className=\"flex-1 flex min-h-0 overflow-hidden\">\n        \n        {/* Playing Field - Takes most space */}\n        <div className=\"flex-1 flex flex-col min-h-0 overflow-hidden\">\n          <PlayingField\n            playedWords={gameState.playedWords}\n            players={gameState.players}\n            gameStatus={gameStatus}\n            isExtendMode={extendMode}\n            selectedWordId={selectedWordId}\n            onWordSelect={handleWordSelect}\n          />\n        </div>\n\n        {/* Right Sidebar - Turn Indicator and Controls */}\n        <div className=\"w-64 ml-2 flex-shrink-0 flex flex-col gap-2\">\n          {/* Turn Indicator */}\n          <TurnIndicator\n            gameState={gameState}\n            onEndTurn={handleEndTurn}\n            onStartGame={handleStartGame}\n            onNewGame={handleNewGame}\n          />\n          \n          {/* Deck and Controls */}\n          <DeckAndControls\n            deckSize={gameState.deck.length}\n            discardPile={gameState.discardPile}\n            tempDiscardedCard={gameState.tempDiscardedCard}\n            selectedCardsCount={selectedCards.size}\n            onPlayWord={handlePlayWordClick}\n            onExtendWord={handleExtendWordClick}\n            onCancelExtend={handleExtendWordCancel}\n            onDiscard={handleDiscardClick}\n            onDraw={handleDrawClick}\n            onDrawFromDiscard={handleDrawFromDiscardClick}\n            isCurrentTurn={currentPlayer.isCurrentTurn}\n            gamePhase={gameState.gamePhase}\n            hasDiscardedThisTurn={currentPlayer.hasDiscardedThisTurn}\n            hasPlayedWords={gameState.playedWords.length > 0}\n            isExtendMode={extendMode}\n          />\n        </div>\n      </div>\n\n              {/* Bottom Player Area (Current Player) - Fixed to bottom */}\n        <div className=\"absolute bottom-0 left-0 right-0 h-52 bg-gradient-to-br from-green-800 to-green-600\">\n          <div className=\"p-2\">\n            <PlayerArea\n              player={gameState.players[0]}\n              isCurrentPlayer={true}\n              selectedCards={selectedCards}\n              onCardClick={handleCardClick}\n              shakeHand={shakeHand}\n            />\n          </div>\n        </div>\n\n      {/* Master Card Modal */}\n      <MasterCardModal\n        isOpen={masterCardModal.isOpen}\n        masterCard={masterCardModal.card}\n        onClose={() => setMasterCardModal({ isOpen: false, card: null })}\n        onAssignLetter={handleAssignLetter}\n      />\n\n      {/* Extend Word Modal */}\n      <ExtendWordModal\n        isOpen={extendWordModal.isOpen}\n        selectedCards={Array.from(selectedCards).map(cardId => \n          currentPlayer.hand.find(card => card.id === cardId)!\n        )}\n        wordToExtend={extendWordModal.wordToExtend}\n        onClose={() => {\n          setExtendWordModal({ isOpen: false, wordToExtend: null });\n          handleExtendWordCancel();\n        }}\n        onConfirm={handleExtendWordConfirm}\n      />\n\n      {/* Notification */}\n      {notification && (\n        <div className={`fixed top-4 right-4 px-4 py-2 rounded-md text-white text-sm font-medium z-50 transition-all duration-300 ${\n          notification.type === 'success' ? 'bg-green-600' : 'bg-red-600'\n        }`}>\n          {notification.message}\n        </div>\n      )}\n\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3069, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbrsh/Code/wordwars/frontend/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { startGame } from '@/shared/gameLogic';\nimport { GameState } from '@/shared/types/game';\nimport GameBoard from '@/components/GameBoard';\n\nexport default function Home() {\n  const [gameState, setGameState] = useState<GameState | null>(null);\n  const [playerNames, setPlayerNames] = useState(['Alice', 'Bob']);\n\n  const startNewGame = () => {\n    const newGame = startGame(playerNames);\n    setGameState(newGame);\n  };\n\n  const handleCardSelect = (card: { letter: string }, playerId: string) => {\n    console.log('Card selected:', card.letter, 'by player:', playerId);\n  };\n\n  const handlePlayWord = () => {\n    console.log('Word played successfully!');\n  };\n\n  const handleDiscard = () => {\n    console.log('Card discarded');\n  };\n\n  const handleDraw = () => {\n    console.log('Card drawn');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-800 to-green-600\">\n      <div className=\"h-screen flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-white/10 backdrop-blur-sm p-4 border-b border-white/20\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-4\">\n              <h1 className=\"text-3xl font-bold text-white\">\n                🃏 WordWars\n              </h1>\n              <a \n                href=\"/test\" \n                className=\"px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm\"\n              >\n                🧪 Test Interface\n              </a>\n            </div>\n            \n            {!gameState ? (\n              <div className=\"flex gap-4 items-center\">\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={playerNames[0]}\n                    onChange={(e) => setPlayerNames([e.target.value, playerNames[1]])}\n                    placeholder=\"Player 1\"\n                    className=\"px-3 py-2 border border-white/30 rounded-md bg-white/10 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={playerNames[1]}\n                    onChange={(e) => setPlayerNames([playerNames[0], e.target.value])}\n                    placeholder=\"Player 2\"\n                    className=\"px-3 py-2 border border-white/30 rounded-md bg-white/10 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                  />\n                </div>\n                <button\n                  onClick={startNewGame}\n                  className=\"px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors font-semibold\"\n                >\n                  Start Game\n                </button>\n              </div>\n            ) : (\n              <div className=\"flex gap-4 items-center\">\n                <div className=\"text-white\">\n                  <span className=\"font-semibold\">Round {gameState.roundNumber}</span>\n                  <span className=\"mx-2\">•</span>\n                  <span>Deck: {gameState.deck.length}</span>\n                  <span className=\"mx-2\">•</span>\n                  <span>Discard: {gameState.discardPile.length}</span>\n                </div>\n                <button\n                  onClick={() => setGameState(null)}\n                  className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors\"\n                >\n                  New Game\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Game Area */}\n        <div className=\"flex-1 min-h-0\">\n          {!gameState ? (\n            <div className=\"h-full flex items-center justify-center\">\n              <div className=\"text-center text-white\">\n                <h2 className=\"text-2xl font-semibold mb-4\">Welcome to WordWars!</h2>\n                <p className=\"text-lg mb-6\">A digital version of the classic Lexicon card game</p>\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 max-w-md mx-auto\">\n                  <h3 className=\"font-semibold mb-3\">How to Play:</h3>\n                  <ul className=\"text-left space-y-2 text-sm\">\n                    <li>• Deal 10 cards to each player</li>\n                    <li>• Form words with your cards to score points</li>\n                    <li>• Discard and draw to get better cards</li>\n                    <li>• First to empty their hand wins the round</li>\n                    <li>• First to 100 points wins the game</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <GameBoard\n              gameState={gameState}\n              onCardSelect={handleCardSelect}\n              onPlayWord={handlePlayWord}\n              onDiscard={handleDiscard}\n              onDraw={handleDraw}\n              onGameStateUpdate={setGameState}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;;;AALA;;;;AAOe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAAC;QAAS;KAAM;IAE/D,MAAM,eAAe;QACnB,MAAM,UAAU,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD,EAAE;QAC1B,aAAa;IACf;IAEA,MAAM,mBAAmB,CAAC,MAA0B;QAClD,QAAQ,GAAG,CAAC,kBAAkB,KAAK,MAAM,EAAE,cAAc;IAC3D;IAEA,MAAM,iBAAiB;QACrB,QAAQ,GAAG,CAAC;IACd;IAEA,MAAM,gBAAgB;QACpB,QAAQ,GAAG,CAAC;IACd;IAEA,MAAM,aAAa;QACjB,QAAQ,GAAG,CAAC;IACd;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BAEb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAAgC;;;;;;kDAG9C,6LAAC;wCACC,MAAK;wCACL,WAAU;kDACX;;;;;;;;;;;;4BAKF,CAAC,0BACA,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDACC,MAAK;gDACL,OAAO,WAAW,CAAC,EAAE;gDACrB,UAAU,CAAC,IAAM,eAAe;wDAAC,EAAE,MAAM,CAAC,KAAK;wDAAE,WAAW,CAAC,EAAE;qDAAC;gDAChE,aAAY;gDACZ,WAAU;;;;;;0DAEZ,6LAAC;gDACC,MAAK;gDACL,OAAO,WAAW,CAAC,EAAE;gDACrB,UAAU,CAAC,IAAM,eAAe;wDAAC,WAAW,CAAC,EAAE;wDAAE,EAAE,MAAM,CAAC,KAAK;qDAAC;gDAChE,aAAY;gDACZ,WAAU;;;;;;;;;;;;kDAGd,6LAAC;wCACC,SAAS;wCACT,WAAU;kDACX;;;;;;;;;;;qDAKH,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;;oDAAgB;oDAAO,UAAU,WAAW;;;;;;;0DAC5D,6LAAC;gDAAK,WAAU;0DAAO;;;;;;0DACvB,6LAAC;;oDAAK;oDAAO,UAAU,IAAI,CAAC,MAAM;;;;;;;0DAClC,6LAAC;gDAAK,WAAU;0DAAO;;;;;;0DACvB,6LAAC;;oDAAK;oDAAU,UAAU,WAAW,CAAC,MAAM;;;;;;;;;;;;;kDAE9C,6LAAC;wCACC,SAAS,IAAM,aAAa;wCAC5B,WAAU;kDACX;;;;;;;;;;;;;;;;;;;;;;;8BAST,6LAAC;oBAAI,WAAU;8BACZ,CAAC,0BACA,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAA8B;;;;;;8CAC5C,6LAAC;oCAAE,WAAU;8CAAe;;;;;;8CAC5B,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAG,WAAU;sDAAqB;;;;;;sDACnC,6LAAC;4CAAG,WAAU;;8DACZ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAMZ,6LAAC,kIAAA,CAAA,UAAS;wBACR,WAAW;wBACX,cAAc;wBACd,YAAY;wBACZ,WAAW;wBACX,QAAQ;wBACR,mBAAmB;;;;;;;;;;;;;;;;;;;;;;AAOjC;GAzHwB;KAAA","debugId":null}}]
}